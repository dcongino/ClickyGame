{"version":3,"sources":["components/navbar/index.js","components/gamesection/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","this","props","score","topScore","React","Component","divStyle","cursor","height","GameCard","handleImageClick","handleOnClick","id","alt","src","image","onClick","style","App","state","matches","correctGuesses","bestScore","clickMessage","handleImageClicked","a","moviePosters","document","getElementById","clickedMatch","filter","match","classList","remove","clicked","add","setState","handleResetAllCards","handleShuffleCards","cards","i","length","j","Math","floor","random","temp","map","matchCard","index","key","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2cc61c22.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Navbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n              <div className=\"container\">\r\n                <a className=\"navbar-brand text-uppercase\" href=\"/\">Clicky Game</a>\r\n                <h4 className=\"navbar-text\">\r\n                  Score: {this.props.score} | Top Score: {this.props.topScore}\r\n                </h4>\r\n              </div>\r\n            </nav>\r\n          </>\r\n      );\r\n    };\r\n  }\r\nexport default Navbar;","import React from \"react\";\r\n\r\nconst divStyle = {\r\n cursor: 'pointer',\r\n  height: '208px'\r\n};\r\nclass GameCard extends React.Component {\r\n  handleImageClick = () => {\r\n     this.props.handleOnClick(this.props.id)\r\n  };\r\n  render() {\r\n    return (\r\n        <div className={\"col-6 col-md-4 col-lg-2 mt-5\"}>\r\n          <img alt={this.props.alt} src={this.props.image} onClick={this.handleImageClick} className={\"img-thumbnail\"} style={divStyle} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default GameCard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/navbar'\nimport GameCard from \"./components/gamesection\";\nimport matches from \"./MatchCards\";\n\nclass App extends React.Component {\n  state = {\n    matches,\n    correctGuesses: 0,\n    bestScore: 0,\n    clickMessage: \"Click on an image to gain points! Click on the same one twice and you lose.\"\n  };\n\n  handleImageClicked = async id => {\n    const moviePosters = document.getElementById(\"game-cards\");\n    const clickedMatch = this.state.matches.filter(match => match.id === id);\n    moviePosters.classList.remove(\"apply-shake\");\n    if (clickedMatch[0].clicked) {\n      moviePosters.classList.add(\"apply-shake\");\n      this.setState({\n        correctGuesses: 0,\n        clickMessage: \"You already clicked on that one. Try again.\",\n      });\n\n      this.handleResetAllCards();\n    } else if (this.state.correctGuesses < 11) {\n      clickedMatch[0].clicked = true;\n      // increment the appropriate counter\n      this.setState({ correctGuesses: this.state.correctGuesses + 1 }, () => {\n        if (this.state.correctGuesses > this.state.bestScore) {\n          this.setState({ bestScore: this.state.correctGuesses });\n        }\n      });\n\n      this.setState({ clickMessage: \"Great! You haven't click on that one yet! Keep going!\" });\n      this.handleShuffleCards();\n    } else {\n      // Set its value to true\n      clickedMatch[0].clicked = true;\n      // restart the guess counter\n      this.state.correctGuesses = 0;\n      // Egg on the user to play again\n      this.state.clickMessage = \"WOW!!! You got ALL of them!!! Now, let's see if you can do it again!\";\n      this.setState({ bestScore: 12 });\n      this.handleResetAllCards();\n    }\n  };\n\n  handleShuffleCards = () => {\n    let cards = this.state.matches;\n    for (let i = 0; i < cards.length - 1; i++) {\n      const j = i + Math.floor(Math.random() * (cards.length - i));\n      const temp = cards[j];\n      cards[j] = cards[i];\n      cards[i] = temp;\n    }\n    this.setState({ matches: cards });\n  };\n\n  handleResetAllCards = () => {\n    for (let i = 0; i < this.state.matches.length; i++) {\n      matches[i].clicked = false;\n      this.setState({\n        correctGuesses: 0,\n        matches: matches\n      });\n      this.handleShuffleCards()\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar score={this.state.correctGuesses} topScore={this.state.bestScore} />\n        <div className=\"jumbotron py-3\">\n          <h4>{this.state.clickMessage}</h4>\n        </div>\n        <div className=\"container\">\n          <div id=\"game-cards\" className=\"row\">\n            {this.state.matches.map((matchCard, index) => {\n              return <GameCard\n                key={index}\n                id={matchCard.id}\n                image={matchCard.image}\n                handleOnClick={this.handleImageClicked}\n              />\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}